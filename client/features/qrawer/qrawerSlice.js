import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchQrawers, addQrawer, addShelf, addItem } from './qrawerAPI';

const initialState = {
  status: 'idle',
  qrawerName: '',
  shelfName: ''
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const newQrawerAsync = createAsyncThunk(
  'qrawer/newQrawer',
  async ({ token, name }) => {
    console.log('qrawer slice', name)
    const response = await addQrawer({ token, name });
    // The value we return becomes the `fulfilled` action payload
    // console.log('token?', response)z
    return response;
  }
);

export const newShelfAsync = createAsyncThunk(
  'qrawer/newShelf',
  async ({ token, shelfName, qrawerId }) => {
    console.log('shelf slice', shelfName, qrawerId)
    const response = await addShelf({ token, shelfName, qrawerId });
    // The value we return becomes the `fulfilled` action payload
    // console.log('token?', response)z
    return response;
  }
);

export const newItemAsync = createAsyncThunk(
  'qrawer/newItem',
  async ({ token, itemName, itemCount, shelfId }) => {
    console.log('item slice', token, itemName, itemCount, shelfId)
    const response = await addItem({ token, itemName, itemCount, shelfId });
    // The value we return becomes the `fulfilled` action payload
    // console.log('token?', response)
    return response;
  }
);

// export const signupAsync = createAsyncThunk(
//   'qrawer/fetchQrawer',
//   async ({email, username, password}) => {
//     const response = await fetchSignUp({email, username, password});
//     // The value we return becomes the `fulfilled` action payload
//     // console.log('token?', response)
//     return response;
//   }
// );

// fetch token

export const qrawerSlice = createSlice({
  name: 'qrawer',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    signout: (state) => {
      state.token = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(newQrawerAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(newQrawerAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.token = action.payload;
      })
  },
});

export const { signout } = qrawerSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectName = (state) => state.qrawer.qrawerName;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default qrawerSlice.reducer;
